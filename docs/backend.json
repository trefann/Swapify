{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile in the SkillSwap application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "profilePicture": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "bio": {
          "type": "string",
          "description": "User's biographical information."
        },
        "availability": {
          "type": "string",
          "description": "User's availability hours."
        },
        "credits": {
          "type": "number",
          "description": "Number of credits the user has."
        },
        "skillIdsOffered": {
          "type": "array",
          "description": "List of skills offered. (Relationship: UserProfile 1:N SkillOffered)",
          "items": {
            "type": "string"
          }
        },
        "skillIdsWanted": {
          "type": "array",
          "description": "List of skills wanted. (Relationship: UserProfile 1:N SkillWanted)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email",
        "displayName"
      ]
    },
    "Skill": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Skill",
      "type": "object",
      "description": "Represents a skill that can be taught or learned.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the skill."
        },
        "name": {
          "type": "string",
          "description": "Name of the skill."
        },
        "description": {
          "type": "string",
          "description": "Description of the skill."
        },
        "category": {
          "type": "string",
          "description": "Category of the skill."
        }
      },
      "required": [
        "id",
        "name",
        "description"
      ]
    },
    "SwapRequest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SwapRequest",
      "type": "object",
      "description": "Represents a request to swap skills between two users.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the swap request."
        },
        "requesterId": {
          "type": "string",
          "description": "Reference to UserProfile who initiated the request. (Relationship: UserProfile 1:N SwapRequest)"
        },
        "receiverId": {
          "type": "string",
          "description": "Reference to UserProfile who is receiving the request. (Relationship: UserProfile 1:N SwapRequest)"
        },
        "skillId": {
          "type": "string",
          "description": "Reference to Skill being swapped. (Relationship: Skill 1:N SwapRequest)"
        },
        "status": {
          "type": "string",
          "description": "Status of the swap request (e.g., pending, accepted, declined)."
        },
        "startTime": {
          "type": "string",
          "description": "Start time of the scheduled swap session.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "End time of the scheduled swap session.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "requesterId",
        "receiverId",
        "skillId",
        "status",
        "startTime",
        "endTime"
      ]
    },
    "ChatMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatMessage",
      "type": "object",
      "description": "Represents a chat message exchanged between users in a swap request.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the chat message."
        },
        "swapRequestId": {
          "type": "string",
          "description": "Reference to SwapRequest this message belongs to. (Relationship: SwapRequest 1:N ChatMessage)"
        },
        "senderId": {
          "type": "string",
          "description": "Reference to UserProfile who sent the message. (Relationship: UserProfile 1:N ChatMessage)"
        },
        "message": {
          "type": "string",
          "description": "Content of the chat message."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "swapRequestId",
        "senderId",
        "message",
        "timestamp"
      ]
    },
    "RatingFeedback": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RatingFeedback",
      "type": "object",
      "description": "Represents a rating and feedback given by a user after a swap session.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the rating and feedback."
        },
        "swapRequestId": {
          "type": "string",
          "description": "Reference to SwapRequest this rating/feedback is for. (Relationship: SwapRequest 1:N RatingFeedback)"
        },
        "raterId": {
          "type": "string",
          "description": "Reference to UserProfile who is providing the rating. (Relationship: UserProfile 1:N RatingFeedback)"
        },
        "rating": {
          "type": "number",
          "description": "Rating given by the user (e.g., 1-5)."
        },
        "feedback": {
          "type": "string",
          "description": "Feedback provided by the user."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the rating and feedback was submitted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "swapRequestId",
        "raterId",
        "rating",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profiles. Uses path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/skills/{skillId}",
        "definition": {
          "entityName": "Skill",
          "schema": {
            "$ref": "#/backend/entities/Skill"
          },
          "description": "Stores skills available in the SkillSwap application.",
          "params": [
            {
              "name": "skillId",
              "description": "The unique identifier for the skill."
            }
          ]
        }
      },
      {
        "path": "/swap_requests/{swapRequestId}",
        "definition": {
          "entityName": "SwapRequest",
          "schema": {
            "$ref": "#/backend/entities/SwapRequest"
          },
          "description": "Stores swap requests between users. Includes 'requesterId' and 'receiverId' for identifying participants.",
          "params": [
            {
              "name": "swapRequestId",
              "description": "The unique identifier for the swap request."
            }
          ]
        }
      },
      {
        "path": "/swap_requests/{swapRequestId}/chat_messages/{chatMessageId}",
        "definition": {
          "entityName": "ChatMessage",
          "schema": {
            "$ref": "#/backend/entities/ChatMessage"
          },
          "description": "Stores chat messages for each swap request. Uses a subcollection to associate messages with their respective swap request.",
          "params": [
            {
              "name": "swapRequestId",
              "description": "The unique identifier for the swap request."
            },
            {
              "name": "chatMessageId",
              "description": "The unique identifier for the chat message."
            }
          ]
        }
      },
      {
        "path": "/swap_requests/{swapRequestId}/rating_feedback/{ratingFeedbackId}",
        "definition": {
          "entityName": "RatingFeedback",
          "schema": {
            "$ref": "#/backend/entities/RatingFeedback"
          },
          "description": "Stores rating and feedback for each swap request. Uses a subcollection to associate feedback with its respective swap request.",
          "params": [
            {
              "name": "swapRequestId",
              "description": "The unique identifier for the swap request."
            },
            {
              "name": "ratingFeedbackId",
              "description": "The unique identifier for the rating feedback."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. Authorization independence is achieved through denormalization of user roles and memberships directly into documents where authorization is required, avoiding costly and insecure `get()` calls in security rules. Structural segregation is applied by keeping data with different access requirements in separate collections. Access modeling uses path-based ownership for user-specific data and membership maps for collaborative access. This structure supports QAPs (Rules Are Not Filters) by enabling secure list operations based on the presence of the user's ID in membership maps or ownership paths. The structure facilitates integrity of data through predictable schemas and explicit state modeling using a dedicated 'status' field."
  }
}
