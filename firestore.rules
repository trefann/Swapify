/**
 * @file Firestore Security Rules for SkillSwap
 * @version Prototyping
 *
 * @description
 * This ruleset enforces a user-ownership model for user profiles,
 * allows public reads for skills, and restricts swap requests and
 * scheduled sessions to authorized participants. Chat messages are
 * further secured within swap requests. Data validation is minimal,
 * focusing on authorization and relational integrity for rapid prototyping.
 *
 * @data_structure
 * - /users/{userId}: User profiles, owned by the user.
 * - /skills/{skillId}: Skills available in the application, publicly readable, owner-writeable.
 * - /swap_requests/{swapRequestId}: Skill swap requests between users.
 * - /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}: Chat messages for swap requests, restricted to participants.
 * - /scheduled_sessions/{sessionId}: Scheduled skill swap sessions.
 *
 * @key_security_decisions
 * - Users can only read/write their own profile data.
 * - Skills are publicly readable, but only the owner can create/update/delete.
 * - Swap requests are accessible only to the requester and receiver.
 * - Chat messages are accessible only to participants of the swap request.
 * - Scheduled sessions are accessible only to the participants.
 * - No user listing is allowed.
 *
 * @denormalization_for_authorization
 * - Skills require 'userId' to be stored on the skill document to determine ownership.
 * - SwapRequests require 'requesterId' and 'receiverId' to be stored on the document to determine participants.
 * - ChatMessages require 'swapRequestId' to determine the parent swap request, and 'senderId' to determine the message's author.
 * - ScheduledSessions require 'participants' array to determine authorized users.
 *
 * @structural_segregation
 * - No explicit structural segregation is used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.id == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to skill documents. Skills are publicly readable, but only the owner can modify them.
     * @path /skills/{skillId}
     * @allow (get, list) - Any user can read or list skills.
     * @allow (create) - User with UID 'user123' can create a skill with skill.userId == 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete a skill they own.
     * @deny (create) - User with UID 'user456' cannot create a skill with skill.userId == 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a skill owned by 'user123'.
     * @principle Allows public reads, enforces ownership for writes.
     */
    match /skills/{skillId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to swap request documents. Only the requester and receiver can access the swap request.
     * @path /swap_requests/{swapRequestId}
     * @allow (get) - User with UID 'user123' can get a swap request if they are the requester or receiver.
     * @allow (create) - User with UID 'user123' can create a swap request with requesterId == 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete a swap request if they are the requester or receiver and the document exists.
     * @deny (get) - User with UID 'user456' cannot get a swap request where they are not the requester or receiver.
     * @deny (create) - User with UID 'user456' cannot create a swap request with requesterId == 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a swap request where they are not the requester or receiver.
     * @principle Restricts access to swap requests to the participants (requester and receiver).
     */
    match /swap_requests/{swapRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant(requesterId, receiverId) {
        return request.auth.uid == requesterId || request.auth.uid == receiverId;
      }
      function isExistingParticipant() {
        return isSignedIn() && (resource.data.requesterId == request.auth.uid || resource.data.receiverId == request.auth.uid);
      }
      allow get: if isExistingParticipant();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.requesterId == request.auth.uid;
      allow update: if isExistingParticipant();
      allow delete: if isExistingParticipant();
    }

    /**
     * @description Controls access to chat messages within a swap request. Only participants of the swap request can access the messages.
     * @path /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}
     * @allow (get, list) - User with UID 'user123' can get/list messages if they are a participant in the parent swap request.
     * @allow (create) - User with UID 'user123' can create a message if they are a participant in the parent swap request.
     * @allow (update, delete) - No updates or deletes are allowed on chat messages.
     * @deny (get, list) - User with UID 'user456' cannot get/list messages if they are not a participant in the parent swap request.
     * @deny (create) - User with UID 'user456' cannot create a message if they are not a participant in the parent swap request.
     * @principle Restricts access to chat messages to participants of the associated swap request.
     */
    match /swap_requests/{swapRequestId}/chat_messages/{chatMessageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant(swapRequestId) {
        return get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.requesterId == request.auth.uid
            || get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.receiverId == request.auth.uid;
      }
      allow get, list: if isSignedIn() && isParticipant(swapRequestId);
      allow create: if isSignedIn() && isParticipant(swapRequestId);
      allow update, delete: if false;
    }

     /**
      * @description Controls access to scheduled session documents. Only participants of the session can access.
      * @path /scheduled_sessions/{sessionId}
      * @allow (get) - User with UID 'user123' can get a session if they are a participant.
      * @allow (create) - User with UID 'user123' can create a session if they are a participant.
      * @allow (update, delete) - User with UID 'user123' can update/delete a session if they are a participant and the document exists.
      * @deny (get) - User with UID 'user456' cannot get a session where they are not a participant.
      * @deny (create) - User with UID 'user456' cannot create a session where they are not a participant.
      * @deny (update, delete) - User with UID 'user456' cannot update/delete a session where they are not a participant.
      * @principle Restricts access to scheduled sessions to the participants.
      */
    match /scheduled_sessions/{sessionId} {
       function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant() {
            return request.resource.data.participants.hasAny([request.auth.uid]);
        }

        function isExistingParticipant() {
          return isSignedIn() && resource.data.participants.hasAny([request.auth.uid]);
        }

        allow get: if isExistingParticipant();
        allow list: if false;
        allow create: if isSignedIn() && isParticipant();
        allow update: if isExistingParticipant();
        allow delete: if isExistingParticipant();
    }
  }
}