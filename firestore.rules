/**
 * @file Firebase Security Rules for SkillSwap Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and a shared access model for swap requests and related data. It prioritizes
 * secure data access based on authenticated users and explicit relationships
 * defined within the data. Schema validation is relaxed for prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the
 *   authenticated user with the matching UID.
 * - /skills/{skillId}: Stores skills, create by authenticated users, publicly readable.
 * - /swap_requests/{swapRequestId}: Stores swap requests between users. Accessible to involved participants.
 * - /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}: Stores chat messages for specific swap requests. Accessible to involved participants.
 * - /scheduled_sessions/{sessionId}: Stores scheduled sessions for swap requests. Accessible to involved participants.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - Strict ownership is enforced for user profiles.
 * - Swap requests and chat messages are accessible only to the participants involved.
 *
 * Denormalization for Authorization:
 * - Swap requests include 'requesterId' and 'receiverId' to avoid needing to query users collection for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles with owner-only access.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User attempts to create a profile with an ID different from their own UID.
     * @deny (get, update, delete) - User attempts to access another user's profile.
     * @deny (list) - Listing all users is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to skills, but restricts creation, updates, and deletion to the skill owner.
     * @path /skills/{skillId}
     * @allow (get, list) - Anyone can read the list of skills.
     * @allow (create) - Authenticated user can create a skill if they are the owner.
     * @allow (update, delete) - Only the owner can update or delete the skill.
     * @deny (create) - Non-authenticated user attempts to create a skill.
     * @deny (update, delete) - Non-owner attempts to update or delete the skill.
     * @principle Allows public read access with owner-only writes.
     */
    match /skills/{skillId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return request.auth != null && request.auth.uid == userId && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows access to swap requests only for the participants involved.
     * @path /swap_requests/{swapRequestId}
     * @allow (get, list) - Participants (requester or receiver) can read swap requests.
     * @allow (create) - Authenticated users can create swap requests.
     * @allow (update, delete) - Only participants can update/delete swap requests.
     * @deny (get, list) - Non-participants attempt to read swap requests.
     * @principle Restricts access to swap requests based on participation.
     */
    match /swap_requests/{swapRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(requesterId, receiverId) {
        return request.auth != null && (request.auth.uid == requesterId || request.auth.uid == receiverId);
      }
       function isExistingParticipant(requesterId, receiverId) {
        return request.auth != null && (request.auth.uid == requesterId || request.auth.uid == receiverId) && resource.data != null;
      }
      allow get, list: if isParticipant(resource.data.requesterId, resource.data.receiverId);
      allow create: if isSignedIn();
      allow update: if isExistingParticipant(resource.data.requesterId, resource.data.receiverId);
      allow delete: if isExistingParticipant(resource.data.requesterId, resource.data.receiverId);
    }

    /**
     * @description Allows access to chat messages only for participants of the corresponding swap request.
     * @path /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}
     * @allow (get, list) - Participants can read chat messages.
     * @allow (create) - Participants can create chat messages.
     * @deny (get, list, create) - Non-participants attempt to read or create chat messages.
     * @principle Restricts access to chat messages based on swap request participation.
     */
    match /swap_requests/{swapRequestId}/chat_messages/{chatMessageId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isParticipant(requesterId, receiverId) {
          return request.auth != null && (request.auth.uid == requesterId || request.auth.uid == receiverId);
        }
        function isSwapRequestParticipant(swapRequestId) {
            return exists(/databases/$(database)/documents/swap_requests/$(swapRequestId)) && (get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.requesterId == request.auth.uid
                || get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.receiverId == request.auth.uid);
        }
         function isExistingSwapRequestParticipant(swapRequestId) {
          return isSwapRequestParticipant(swapRequestId);
        }


      allow get, list: if isExistingSwapRequestParticipant(swapRequestId);
      allow create: if isExistingSwapRequestParticipant(swapRequestId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to scheduled sessions only for participants of the corresponding swap request.
     * @path /scheduled_sessions/{sessionId}
     * @allow (get, list) - Participants can read scheduled sessions.
     * @allow (create) - Participants can create scheduled sessions.
     * @deny (get, list, create) - Non-participants attempt to read or create scheduled sessions.
     */
      match /scheduled_sessions/{sessionId} {
          function isSignedIn() {
            return request.auth != null;
          }

          function isParticipant(participantIds) {
              return request.auth != null && participantIds.hasAny([request.auth.uid]);
          }

          function isSwapRequestParticipant(swapRequestId) {
            return exists(/databases/$(database)/documents/swap_requests/$(swapRequestId)) && (get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.requesterId == request.auth.uid
                  || get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.receiverId == request.auth.uid);
          }
          function isExistingSwapRequestParticipant(swapRequestId) {
            return isSwapRequestParticipant(swapRequestId);
          }

        allow get, list: if isSignedIn() && isSwapRequestParticipant(resource.data.swapRequestId);
        allow create: if isSignedIn() && isSwapRequestParticipant(resource.data.swapRequestId);
        allow update: if false;
        allow delete: if false;
      }
  }
}