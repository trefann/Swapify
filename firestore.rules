/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and shared access for swap requests.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /skills/{skillId}: Stores skill data, publicly readable but writable only by the skill owner.
 * - /swap_requests/{swapRequestId}: Stores swap requests between users, accessible to the requester and receiver.
 * - /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}: Stores chat messages for each swap request, accessible to participants.
 * - /scheduled_sessions/{sessionId}: Stores scheduled session information, with access granted to session participants.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Skills are publicly readable, but only the owner can modify them.
 * - Swap requests and associated chat messages are accessible only to the involved users.
 * - Listing of swap requests is allowed for authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny  (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @deny  (update) User with UID 'user456' cannot update the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access control for skills. Skills are publicly readable, but only the owner can modify them.
     * @path /skills/{skillId}
     * @allow (get) Any user can read a skill.
     * @allow (list) Any user can list skills.
     * @allow (create) User with UID 'user123' can create a skill with userId 'user123'.
     * @allow (update) User with UID 'user123' can update a skill they own.
     * @allow (delete) User with UID 'user123' can delete a skill they own.
     * @deny (create) User with UID 'user123' cannot create a skill with userId 'user456'.
     * @deny (update) User with UID 'user456' cannot update a skill owned by 'user123'.
     * @principle Allows public reads, but enforces ownership for writes.
     */
    match /skills/{skillId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }


      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if isOwner();
      allow delete: if isOwner();
    }

    /**
     * @description Manages access control for swap requests.
     * @path /swap_requests/{swapRequestId}
     * @allow (get) User with UID 'user123' can read a swap request where they are the requester or receiver.
     * @allow (list) Authenticated user can list all swap requests.
     * @allow (create) User with UID 'user123' can create a swap request where they are the requester.
     * @allow (update) User with UID 'user123' can update a swap request where they are the requester or receiver.
     * @allow (delete) User with UID 'user123' can delete a swap request where they are the requester.
     * @deny (get) User with UID 'user456' cannot read a swap request they are not involved in.
     * @deny (update) User with UID 'user456' cannot update a swap request they are not involved in.
     * @principle Enforces shared access based on requesterId and receiverId fields.
     */
    match /swap_requests/{swapRequestId} {
      function isParticipant() {
        return request.auth != null && (resource.data.requesterId == request.auth.uid || resource.data.receiverId == request.auth.uid);
      }


      allow get: if isParticipant();
      allow list: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if isParticipant();
      allow delete: if request.auth != null && resource.data.requesterId == request.auth.uid;
    }

    /**
     * @description Manages access control for chat messages within a swap request.
     * @path /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}
     * @allow (get) User involved in the swap request can read chat messages.
     * @allow (list) User involved in the swap request can list chat messages.
     * @allow (create) User involved in the swap request can create chat messages.
     * @deny (get) User not involved in the swap request cannot read chat messages.
     * @deny (list) User not involved in the swap request cannot list chat messages.
     * @principle Enforces shared access to chat messages based on swap request participants.
     */
    match /swap_requests/{swapRequestId}/chat_messages/{chatMessageId} {
        function isParticipant() {
          let swapRequest = get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data;
          return request.auth != null && (swapRequest.requesterId == request.auth.uid || swapRequest.receiverId == request.auth.uid);
        }

        allow get, list: if isParticipant();
        allow create: if isParticipant();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Manages access control for scheduled sessions. Participants can read session data.
     * @path /scheduled_sessions/{sessionId}
     * @allow (get) User who is a participant in the session can read the session details.
     * @allow (list) No listing allowed
     * @allow (create) No one is allowed to create
     * @principle Enforces access control based on the participants array.
     */
    match /scheduled_sessions/{sessionId} {
       function isParticipant() {
         return request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
       }

      allow get: if isParticipant();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}