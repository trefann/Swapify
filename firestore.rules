/**
 * @file Firebase Security Rules for SkillSwap application.
 *
 * @description This ruleset enforces a combination of user-ownership and shared-access models to protect data.
 * All write operations are secured by authentication checks and ownership validation.
 *
 * @data_structure
 * - /users/{userId}: User profiles, accessible only to the owner.
 * - /skills/{skillId}: Skills, publicly readable, but create/update/delete restricted to the owner (userId).
 * - /swap_requests/{swapRequestId}: Swap requests, accessible to the requester and receiver.
 * - /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}: Chat messages, accessible to participants of the swap request.
 * - /scheduled_sessions/{sessionId}: Scheduled sessions, accessible to participants.
 *
 * @key_security_decisions
 * - User listing is disallowed to protect privacy.
 * - Read-only access is granted to skills.
 * - All write operations require authentication.
 *
 * @denormalization_for_authorization
 * - Skills include a userId to easily check ownership.
 * - SwapRequests include requesterId and receiverId to authorize access.
 * - ScheduledSessions include participants array for authorization.
 *
 * @structural_segregation
 * - No drafts vs. published; all data is treated as active.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Matches the user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching {userId} can create their own profile.
     * @allow (get, update, delete) Authenticated user can access/modify their own profile.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (get, update, delete) Authenticated user cannot access/modify other user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Matches the skill documents.
     * @path /skills/{skillId}
     * @allow (get, list) Any user can read all skills.
     * @allow (create) Authenticated user can create a skill with their userId.
     * @allow (update, delete) Only the owner (skill.userId) can update or delete the skill.
     * @deny (create) An unauthenticated user cannot create a skill.
     * @deny (update, delete) Authenticated user cannot modify other user's skill.
     * @principle Public read with owner-only writes.
     */
    match /skills/{skillId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Matches the swap request documents.
     * @path /swap_requests/{swapRequestId}
     * @allow (get, list) Participants (requester or receiver) can read the swap request.
     * @allow (create) Authenticated user can create a swap request with them as requester.
     * @allow (update, delete) Only the requester can update the swap request.
     * @deny (create) An unauthenticated user cannot create a swap request.
     * @deny (update, delete) Authenticated user cannot modify other user's swap request.
     * @principle Shared access (closed collaborators).
     */
    match /swap_requests/{swapRequestId} {
       function isParticipant() {
        return isSignedIn() && (resource.data.requesterId == request.auth.uid || resource.data.receiverId == request.auth.uid);
      }

      allow get: if isParticipant();
      allow list: if isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.id == request.auth.uid);

      allow create: if isSignedIn() && request.resource.data.requesterId == request.auth.uid;
      allow update: if isExistingOwner(request.resource.data.requesterId);
      allow delete: if isExistingOwner(request.resource.data.requesterId);
    }

    /**
     * @description Matches the chat message documents.
     * @path /swap_requests/{swapRequestId}/chat_messages/{chatMessageId}
     * @allow (get, list) Participants (requester or receiver) can read chat messages.
     * @allow (create) Authenticated user can create a chat message with them as sender.
     * @allow (update, delete) No one can update or delete chat messages.
     * @deny (create) An unauthenticated user cannot create a chat message.
     * @deny (update, delete) All users cannot modify or delete chat messages.
     * @principle Shared access (closed collaborators) for reads, immutable writes.
     */
    match /swap_requests/{swapRequestId}/chat_messages/{chatMessageId} {
       function isSwapParticipant() {
          return isSignedIn() && (get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.requesterId == request.auth.uid || get(/databases/$(database)/documents/swap_requests/$(swapRequestId)).data.receiverId == request.auth.uid);
       }

      allow get, list: if isSwapParticipant();

      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false;
    }

     /**
     * @description Matches the scheduled session documents.
     * @path /scheduled_sessions/{sessionId}
     * @allow (get, list) Participants can read the session details.
     * @allow (create) Any authenticated user can create a session.
     * @allow (update, delete) No one can update or delete sessions (for now).
     * @deny (create) An unauthenticated user cannot create a session.
     * @deny (update, delete) All users are denied from modifying or deleting sessions.
     * @principle Shared access based on the participants array.
     */
    match /scheduled_sessions/{sessionId} {
       function isSessionParticipant() {
         return isSignedIn() && request.auth.uid in resource.data.participants;
       }
        //The reported error was on this line
        allow list: if isSignedIn();
        allow get: if true;
        allow create: if isSignedIn();
        allow update, delete: if false;
    }
  }
}